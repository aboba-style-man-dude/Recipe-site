const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–µ—Ü–µ–ø—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const RECIPES_DIR = path.join(__dirname, 'recipes');
if (!fs.existsSync(RECIPES_DIR)) {
    fs.mkdirSync(RECIPES_DIR);
}

// –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
const template = fs.readFileSync('recipe-template.html', 'utf-8');

// –ß–∏—Ç–∞–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
const categoryFiles = [
    'data/soups.json',
    'data/salads.json',
    'data/main-dishes.json',
    'data/desserts.json',
    'data/drinks.json'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
function generateIngredientsHTML(ingredients) {
    return ingredients.map(ingredient => `
        <li>
            <span class="ingredient-name">${ingredient.name}</span>
            <span class="ingredient-amount" data-original="${ingredient.amount}" data-unit="${ingredient.unit}">
                ${ingredient.amount} ${ingredient.unit}
            </span>
        </li>
    `).join('\n');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML —à–∞–≥–æ–≤ –øÔøΩÔøΩ–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
function generateStepsHTML(steps) {
    return steps.map(step => `
        <div class="recipe-step">
            <div class="step-number">${step.step}</div>
            <div class="step-content">
                <p>${step.description}</p>
                ${step.tip ? `<div class="step-tip">üí° –°–æ–≤–µ—Ç: ${step.tip}</div>` : ''}
            </div>
        </div>
    `).join('\n');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
async function generateRecipePages() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–µ—Ü–µ–ø—Ç–æ–≤...');
    
    try {
        let totalRecipes = 0;
        
        for (const categoryFile of categoryFiles) {
            console.log(`üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryFile}`);
            
            if (!fs.existsSync(categoryFile)) {
                console.warn(`‚ö†Ô∏è –§–∞–π–ª ${categoryFile} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
                continue;
            }

            const categoryData = JSON.parse(fs.readFileSync(categoryFile, 'utf-8'));
            
            if (!categoryData.recipes) {
                console.warn(`‚ö†Ô∏è –í —Ñ–∞–π–ª–µ ${categoryFile} –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
                continue;
            }

            for (const recipe of categoryData.recipes) {
                console.log(`üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞: ${recipe.title}`);
                
                let recipeHTML = template;
                
                // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                const replacements = {
                    '{{RECIPE_TITLE}}': recipe.title,
                    '{{RECIPE_DESCRIPTION}}': recipe.description,
                    '{{RECIPE_IMAGE}}': recipe.image,
                    '{{RECIPE_TIME}}': recipe.time,
                    '{{RECIPE_DIFFICULTY}}': recipe.difficulty,
                    '{{RECIPE_SERVINGS}}': recipe.servings,
                    '{{RECIPE_CALORIES}}': recipe.calories,
                    '{{RECIPE_INGREDIENTS}}': generateIngredientsHTML(recipe.ingredients),
                    '{{RECIPE_STEPS}}': generateStepsHTML(recipe.steps)
                };

                for (const [placeholder, value] of Object.entries(replacements)) {
                    recipeHTML = recipeHTML.replace(new RegExp(placeholder, 'g'), value);
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                const fileName = `${recipe.id}.html`;
                fs.writeFileSync(path.join(RECIPES_DIR, fileName), recipeHTML);
                console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${fileName}`);
                totalRecipes++;
            }
        }
        
        console.log(`\n‚ú® –ì–æ—Ç–æ–≤–æ! –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${totalRecipes} —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–µ—Ü–µ–ø—Ç–æ–≤`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
console.log('üîÑ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü...\n');
generateRecipePages();

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞...');
    process.exit(0);
}); 